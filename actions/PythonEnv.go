package actions

import (
	"fmt"
	"log"
	"os"
	"os/exec"
)

type PythonEnvAction struct {
	RunFile string
}

func (act PythonEnvAction) DoAction() error {
	err := act.makeRunScript()
	if err != nil {
		fmt.Errorf("could not make run script: \n%s", err)
	}
	err = act.permitRunScript()
	if err != nil {
		fmt.Errorf("could not permit run script: \n%s", err)
	}
	act.makeMainFile()
	return nil
}

func (act PythonEnvAction) GetHelp() string {
	return "builds a python environment in the current directory"
}

func (act *PythonEnvAction) makeRunScript() error {
	// Run file creation and writing
	f, err := os.Create("./" + act.RunFile + ".sh")
	defer f.Close()
	if err != nil {
		return err
	}
	f.WriteString("clear &&\ngo build -o ./a.out &&\n./a.out")
	return nil
}

func (act *PythonEnvAction) permitRunScript() error {
	// Run file permissions
	cmd := exec.Command("chmod", "+x", "./"+act.RunFile+".sh")
	if err := cmd.Run(); err != nil {
		return err
	}
	return nil
}

func (act *PythonEnvAction) makeMainFile() {
	file := "main.py"
	if FileExists(file) {
		fmt.Printf("%s found, skipping generation", file)
		return
	}
	f, err := os.Create("./" + file)
	defer f.Close()
	if err != nil {
		log.Fatalf("Error creating main.go file: %s", err)
	}
	f.WriteString("print(\"generated by jenv\")")
}
