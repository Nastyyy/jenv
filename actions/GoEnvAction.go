package actions

import (
	"fmt"
	"log"
	"os"
	"os/exec"
)

type GoEnvAction struct {
	RunFile string
}

func (act GoEnvAction) DoAction() error {
	currDir, err := os.Getwd()
	if err != nil {
		return err
	}

	fmt.Printf("Making go environment in %s...\n", currDir)
	if err := makeRunScript(act.RunFile); err != nil {
		return err
	}
	if err := permitRunScript(act.RunFile); err != nil {
		return err
	}
	makeMainFile()

	return nil
}

func makeRunScript(runFile string) error {
	// Run file creation and writing
	f, err := os.Create("./" + runFile + ".sh")
	defer f.Close()
	if err != nil {
		return err
	}
	f.WriteString("clear &&\ngo build -o ./a.out &&\n./a.out")

	return nil
}

func permitRunScript(runFile string) error {
	// Run file permissions
	cmd := exec.Command("chmod", "+x", "./"+runFile+".sh")
	if err := cmd.Run(); err != nil {
		return err
	}

	return nil
}

func makeMainFile() {
	file := "main.go"
	if FileExists(file) {
		fmt.Printf("%s found, skipping generation...", file)
		return
	}
	f, err := os.Create("./" + file)
	defer f.Close()
	if err != nil {
		log.Fatalf("Error creating main.go file: %s", err)
	}
	f.WriteString("package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"generated by jmake\")\n}")
}

func (act GoEnvAction) GetHelp() string {
	return "builds a go environment in the current directory"
}
